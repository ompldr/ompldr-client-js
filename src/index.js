/**
 * Omploader
 * ### Take control of your data with Omploader.  **Omploader** is a privacy-first file hosting service that does not compromise on **security, privacy, or speed**. With Omploader, you pay upfront using Bitcoin, and your file is automatically distributed across a global CDN. You decide how much you want to pay based on usage, and you can refresh at any time.  Data is stored using super secure encryption methods (AES-128 on the server, Salsa20 on the client). Furthermore, Omploader does not retain any logs, identifying information, or private keys for file data to respect your privacy.  ### About the API  The Omploader API is available for public use, and operates under an upfront payment model. Generally speaking, there are no limitations on use, however we retain the right to remove content which may be in violation of the underlying host policies.  All API endpoints are rate limited and clients may be throttled as needed. The API returns status code 429 in the event of too many requests. 
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FileInfo', 'model/Invoice', 'model/Quote', 'model/QuoteRequest', 'model/RefreshRequest', 'model/Response', 'api/DefaultApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/FileInfo'), require('./model/Invoice'), require('./model/Quote'), require('./model/QuoteRequest'), require('./model/RefreshRequest'), require('./model/Response'), require('./api/DefaultApi'));
  }
}(function(ApiClient, FileInfo, Invoice, Quote, QuoteRequest, RefreshRequest, Response, DefaultApi) {
  'use strict';

  /**
   * _Take_control_of_your_data_with_Omploader_Omploader_is_a_privacy_first_file_hosting_service_that_does_notcompromise_on_security_privacy_or_speed__With_Omploader_you_payupfront_using_Bitcoin_and_your_file_is_automatically_distributed_acrossa_global_CDN__You_decide_how_much_you_want_to_pay_based_on_usage_andyou_can_refresh_at_any_time_Data_is_stored_using_super_secure_encryption_methods__AES_128_on_the_serverSalsa20_on_the_client__Furthermore_Omploader_does_not_retain_any_logsidentifying_information_or_private_keys_for_file_data_to_respect_yourprivacy__About_the_APIThe_Omploader_API_is_available_for_public_use_and_operates_under_an_upfrontpayment_model__Generally_speaking_there_are_no_limitations_on_use_howeverwe_retain_the_right_to_remove_content_which_may_be_in_violation_of_theunderlying_host_policies_All_API_endpoints_are_rate_limited_and_clients_may_be_throttled_as_needed_The_API_returns_status_code_429_in_the_event_of_too_many_requests_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Omploader = require('index'); // See note below*.
   * var xxxSvc = new Omploader.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Omploader.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Omploader.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Omploader.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 2.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The FileInfo model constructor.
     * @property {module:model/FileInfo}
     */
    FileInfo: FileInfo,
    /**
     * The Invoice model constructor.
     * @property {module:model/Invoice}
     */
    Invoice: Invoice,
    /**
     * The Quote model constructor.
     * @property {module:model/Quote}
     */
    Quote: Quote,
    /**
     * The QuoteRequest model constructor.
     * @property {module:model/QuoteRequest}
     */
    QuoteRequest: QuoteRequest,
    /**
     * The RefreshRequest model constructor.
     * @property {module:model/RefreshRequest}
     */
    RefreshRequest: RefreshRequest,
    /**
     * The Response model constructor.
     * @property {module:model/Response}
     */
    Response: Response,
    /**
     * The DefaultApi service constructor.
     * @property {module:api/DefaultApi}
     */
    DefaultApi: DefaultApi
  };

  return exports;
}));
