/**
 * Omploader
 * ### Take control of your data with Omploader.  **Omploader** is a privacy-first file hosting service that does not compromise on **security, privacy, or speed**. With Omploader, you pay upfront using Bitcoin, and your file is automatically distributed across a global CDN. You decide how much you want to pay based on usage, and you can refresh at any time.  Data is stored using super secure encryption methods (AES-128 on the server, Salsa20 on the client). Furthermore, Omploader does not retain any logs, identifying information, or private keys for file data to respect your privacy.  ### About the API  The Omploader API is available for public use, and operates under an upfront payment model. Generally speaking, there are no limitations on use, however we retain the right to remove content which may be in violation of the underlying host policies.  All API endpoints are rate limited and clients may be throttled as needed. The API returns status code 429 in the event of too many requests. 
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Omploader) {
      root.Omploader = {};
    }
    root.Omploader.FileInfo = factory(root.Omploader.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The FileInfo model module.
   * @module model/FileInfo
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>FileInfo</code>.
   * @alias module:model/FileInfo
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>FileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FileInfo} obj Optional instance to populate.
   * @return {module:model/FileInfo} The populated <code>FileInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('fileId')) {
        obj['fileId'] = ApiClient.convertToType(data['fileId'], 'String');
      }
      if (data.hasOwnProperty('length')) {
        obj['length'] = ApiClient.convertToType(data['length'], 'Number');
      }
      if (data.hasOwnProperty('invoicePaid')) {
        obj['invoicePaid'] = ApiClient.convertToType(data['invoicePaid'], 'Boolean');
      }
      if (data.hasOwnProperty('contentType')) {
        obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
      }
      if (data.hasOwnProperty('downloadsRemaining')) {
        obj['downloadsRemaining'] = ApiClient.convertToType(data['downloadsRemaining'], 'Number');
      }
      if (data.hasOwnProperty('expiresAt')) {
        obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');
      }
    }
    return obj;
  }

  /**
   * Unique identifier for file object.
   * @member {String} fileId
   */
  exports.prototype['fileId'] = undefined;
  /**
   * Length in bytes of the file.
   * @member {Number} length
   */
  exports.prototype['length'] = undefined;
  /**
   * True if the invoice has been paid.
   * @member {Boolean} invoicePaid
   */
  exports.prototype['invoicePaid'] = undefined;
  /**
   * Content type of this file.
   * @member {String} contentType
   */
  exports.prototype['contentType'] = undefined;
  /**
   * Number of downloads remaining. Once this number reaches 0, the file will be deleted. 
   * @member {Number} downloadsRemaining
   */
  exports.prototype['downloadsRemaining'] = undefined;
  /**
   * The time at which this file will expire. Once this date is reached, the file will be deleted. 
   * @member {Date} expiresAt
   */
  exports.prototype['expiresAt'] = undefined;



  return exports;
}));


