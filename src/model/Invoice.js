/**
 * Omploader
 * ### Take control of your data with Omploader.  **Omploader** is a privacy-first file hosting service that does not compromise on **security, privacy, or speed**. With Omploader, you pay upfront using Bitcoin, and your file is automatically distributed across a global CDN. You decide how much you want to pay based on usage, and you can refresh at any time.  Data is stored using super secure encryption methods (AES-128 on the server, Salsa20 on the client). Furthermore, Omploader does not retain any logs, identifying information, or private keys for file data to respect your privacy.  ### About the API  The Omploader API is available for public use, and operates under an upfront payment model. Generally speaking, there are no limitations on use, however we retain the right to remove content which may be in violation of the underlying host policies.  All API endpoints are rate limited and clients may be throttled as needed. The API returns status code 429 in the event of too many requests. 
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FileInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./FileInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Omploader) {
      root.Omploader = {};
    }
    root.Omploader.Invoice = factory(root.Omploader.ApiClient, root.Omploader.FileInfo);
  }
}(this, function(ApiClient, FileInfo) {
  'use strict';




  /**
   * The Invoice model module.
   * @module model/Invoice
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>Invoice</code>.
   * @alias module:model/Invoice
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>Invoice</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Invoice} obj Optional instance to populate.
   * @return {module:model/Invoice} The populated <code>Invoice</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('fileInfo')) {
        obj['fileInfo'] = FileInfo.constructFromObject(data['fileInfo']);
      }
      if (data.hasOwnProperty('invoiceExpiresAt')) {
        obj['invoiceExpiresAt'] = ApiClient.convertToType(data['invoiceExpiresAt'], 'Date');
      }
      if (data.hasOwnProperty('bolt11')) {
        obj['bolt11'] = ApiClient.convertToType(data['bolt11'], 'String');
      }
      if (data.hasOwnProperty('privateKey')) {
        obj['privateKey'] = ApiClient.convertToType(data['privateKey'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/FileInfo} fileInfo
   */
  exports.prototype['fileInfo'] = undefined;
  /**
   * The date at which this invoice expires, in UTC. The file will also be deleted if there is no remaining time (if, for example, this invoice was generated by a refresh request). 
   * @member {Date} invoiceExpiresAt
   */
  exports.prototype['invoiceExpiresAt'] = undefined;
  /**
   * The bech32 Bitcoin invoice for this file. See https://github.com/lightningnetwork/lightning-rfc/blob/master/11-payment-encoding.md for details. 
   * @member {String} bolt11
   */
  exports.prototype['bolt11'] = undefined;
  /**
   * The base64 encoded AES-128 private key for this file's server side encryption. This key is not stored anywhere on Omploader's servers. Clients are responsible for managing the private keys. 
   * @member {String} privateKey
   */
  exports.prototype['privateKey'] = undefined;



  return exports;
}));


